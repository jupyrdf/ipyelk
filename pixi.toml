"$schema" = "https://pixi.sh/v0.32.1/schema/manifest/schema.json"

# tasks ################################################################################
[tasks]
build = {depends-on = ["build-py-schema", "build-js-lib", "build-js-ext"]}
dist = {depends-on = ["dist-npm", "dist-pypi", "dist-hash"]}
fix = {depends-on = ["fix-taplo", "fix-ruff-format", "fix-ruff-check", "fix-js-dupes"]}
lint = {depends-on = ["lint-ruff-format", "lint-ruff-check"]}
test = {depends-on = ["utest-pytest-cov", "itest-nbconvert"]}
dev = {depends-on = ["fix", "lint", "build", "dist", "test"]}

# fragments ############################################################################
[tasks.pip-e--]
cmd = """rm -f build/pip-freeze/$PIXI_ENVIRONMENT_NAME.txt
&& python -m pip install -e .
  --disable-pip-version-check
  --ignore-installed
  --no-cache-dir
  --no-deps
&& pip check
&& mkdir -p build/pip-freeze
&& pip list --format=freeze > build/pip-freeze/$PIXI_ENVIRONMENT_NAME.txt"""

[tasks.pytest-cov--]
cmd = """export COVERAGE_FILE=$PIXI_PROJECT_ROOT/build/reports/$PIXI_ENVIRONMENT_NAME/.coverage
&& pytest
    --cov ipyelk
    --cov-report html:build/reports/$PIXI_ENVIRONMENT_NAME/htmlcov
    --cov-report term-missing:skip-covered
    --cov-context test
    --html build/reports/$PIXI_ENVIRONMENT_NAME/pytest.html
    --junitxml build/reports/$PIXI_ENVIRONMENT_NAME/pytest.xunit.xml
    --no-cov-on-fail
    --self-contained-html
"""

[tasks.nbconvert--]
cmd = """
export
    NBCONVERT_DIR=$PIXI_PROJECT_ROOT/build/reports/$PIXI_ENVIRONMENT_NAME/nbconvert
    IPYELK_TESTING=true
&& rm -rf $NBCONVERT_DIR
&& mkdir -p $NBCONVERT_DIR
&& cd $NBCONVERT_DIR
&& jupyter nbconvert
    --to html
    --output-dir .
    --execute
    --ExecutePreprocessor.timeout=1200
    $PIXI_PROJECT_ROOT/examples/**/*.ipynb
"""

# setup ################################################################################
[feature.tasks-build.tasks.setup-js]
cmd = """jlpm"""
inputs = [".yarnrc.yml", "package.json", "yarn.lock"]
outputs = ["yarn.lock", "node_modules/.yarn-state.yml"]

# build ################################################################################
[feature.tasks-build.tasks.build-py-schema]
cmd = "jlpm schema"
depends-on = ["setup-js"]
inputs = ["js/sprotty/json/elkschema.ts", "node_modules/.yarn-state.yml"]
outputs = ["src/ipyelk/schema/elkschema.json"]

[feature.tasks-build.tasks.build-js-lib]
cmd = "jlpm build:ts"
depends-on = ["build-py-schema", "setup-js"]
inputs = [
  "{tsconfigbase,package}.json",
  "js/",
  "node_modules/.yarn-state.yml",
  "src/ipyelk/schema/elkschema.json",
]
outputs = ["build/.src.tsbuildinfo"]

[feature.tasks-build.tasks.build-js-ext]
cmd = "jlpm build:ext"
depends-on = ["setup-js", "build-js-lib"]
inputs = [
  "node_modules/.yarn-state.yml",
  "style/",
  "build/.src.tsbuildinfo",
  "webpack.config.js",
]
outputs = ["src/_d/share/jupyter/labextensions/@jupyrdf/jupyter-elk/package.json"]

# ship #################################################################################
[feature.tasks-build.tasks.dist-npm]
cmd = "mkdir -p dist && cd dist && npm pack .."
depends-on = ["build-js-lib"]
inputs = ["build/.src.tsbuildinfo", "{package.json,README.md,LICENSE}"]
outputs = ["dist/*.tgz"]

[feature.tasks-build.tasks.dist-pypi]
cmd = "pyproject-build . --no-isolation"
inputs = ["{README.md,LICENSE,pyproject.toml}", "src/", "tests/", "!**/__pycache__"]
outputs = ["dist/*.{whl,tar.gz}"]
depends-on = ["build-py-schema", "build-js-ext"]

[feature.tasks-build.tasks.dist-hash]
cmd = """python -c '
import pathlib, hashlib; d = pathlib.Path("dist");
[print(f"{hashlib.sha256(p.read_bytes()).hexdigest()}  {p.name}")
for p in sorted(d.glob("*.*"))]
' > dist/SHA256SUMS"""
inputs = ["dist/", "!SHA256SUMS"]
depends-on = ["dist-pypi", "dist-npm"]
outputs = ["dist/SHA256SUMS"]

# unit test ############################################################################
[feature.tasks-utest.tasks.pip-utest]
cmd = """pixi r -e utest pip-e--"""
inputs = ["pyproject.toml"]
outputs = ["build/pip-freeze/utest.txt"]

[feature.tasks-utest.tasks.utest-pytest-cov]
cmd = "pixi r -e utest pytest-cov--"
depends-on = ["pip-utest"]
inputs = [
  "build/pip-freeze/utest.txt",
  "pyproject.toml",
  "{tests,src}/**/*.{py,json}",
  "!**/.ipynb_checkpoints",
]
outputs = ["build/reports/utest/{pytest.html,pytest.xunit.xml,htmlcov/status.json}"]

# integration test #####################################################################
[feature.tasks-utest.tasks.pip-itest]
cmd = """pixi r -e itest pip-e--"""
inputs = ["pyproject.toml"]
outputs = ["build/pip-freeze/itest.txt"]

[feature.tasks-itest.tasks.itest-nbconvert]
cmd = """pixi r -e itest nbconvert--"""
depends-on = ["pip-itest"]
inputs = ["examples/", "!**/.ipynb_checkpoints"]
outputs = ["build/reports/itest/nbconvert/"]

# lint #################################################################################
[feature.tasks-lint.tasks.fix-taplo]
description = "consistently format TOML files"
cmd = """taplo fmt
  *.toml
  --option=array_auto_collapse=true
  --option=compact_inline_tables=true
  --option=column_width=88"""
inputs = ["*.toml"]

[feature.tasks-lint.tasks.lint-ruff-format]
cmd = "ruff format --check"
inputs = [
  "{scripts,src,tests,docs,atest,examples}/**/*.{py,ipynb}",
  "pyproject.toml",
  "!**/.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.lint-ruff-check]
cmd = "ruff check"
inputs = [
  "{scripts,src,tests,docs,atest,examples}/**/*.{py,ipynb}",
  "pyproject.toml",
  "!**/.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.fix-ruff-format]
cmd = "ruff format"
inputs = [
  "{scripts,src,tests,docs,atest,examples}/**/*.{py,ipynb}",
  "pyproject.toml",
  "!**/.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.fix-ruff-check]
cmd = "ruff check --fix-only"
depends-on = ["fix-ruff-format"]
inputs = [
  "{scripts,src,tests,docs,atest,examples}/**/*.{py,ipynb}",
  "pyproject.toml",
  "!**/.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.fix-js-dupes]
cmd = "jlpm yarn-berry-deduplicate -s fewer --fail"
inputs = ["package.json"]
outputs = ["yarn.lock", "node_modules/.yarn-state.yml"]
depends-on = ["setup-js"]

# dependencies #########################################################################
[feature.deps-js.dependencies]
nodejs = "22.*"

[feature.deps-lint.dependencies]
taplo = "*"
ruff = "*"

[feature.deps-py.dependencies]
python = ">=3.9"

[feature.deps-lab.dependencies]
jupyterlab = ">=4.2.0,<5"

[feature.deps-flit.dependencies]
flit-core = ">=3.9.0,<4"

[feature.deps-build.dependencies]
python-build = "*"

[feature.deps-run.dependencies]
jsonschema = ">=4.18"
ipywidgets = ">=8.0.1,<9"
networkx = "*"
pydantic = ">=1.10.17,<3"

[feature.deps-pip.dependencies]
pip = "*"
flit-core = "*"

[feature.deps-utest.dependencies]
pytest = "*"
pytest-html = "*"
pytest-asyncio = "*"

[feature.deps-itest.dependencies]
nbconvert = "*"
ipykernel = "*"
importnb = "*"
bqplot = "*"

[feature.deps-cov.dependencies]
pytest-cov = "*"

# environments #########################################################################
[environments]
lint = {features = ["deps-lab", "deps-py", "deps-js", "deps-lint", "tasks-lint"]}
build = {features = [
  "deps-build",
  "deps-flit",
  "deps-js",
  "deps-lab",
  "deps-py",
  "tasks-build",
]}
utest = {features = [
  "deps-cov",
  "deps-flit",
  "deps-pip",
  "deps-py",
  "deps-run",
  "deps-utest",
  "tasks-utest",
]}
itest = {features = [
  "deps-flit",
  "deps-pip",
  "deps-py",
  "deps-run",
  "deps-itest",
  "tasks-itest",
]}
dev = {features = [
  "deps-build",
  "deps-cov",
  "deps-flit",
  "deps-js",
  "deps-lab",
  "deps-pip",
  "deps-py",
  "deps-run",
  "deps-utest",
  "deps-itest",
]}

# meta #################################################################################
[project]
name = "ipyelk"
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]
