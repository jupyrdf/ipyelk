(self.webpackChunk_jupyrdf_jupyter_elk=self.webpackChunk_jupyrdf_jupyter_elk||[]).push([[940],{9213:(e,t,n)=>{"use strict";n.r(t),n.d(t,{ELKExporterModel:()=>d,ELKExporterView:()=>p});var l=n(8081),a=n(8036),r=n(5825),s=n(8970),o=n(8343);const i=`\n  ${s.Z}\n  ${o.Z}\n  /**\n * Copyright (c) 2021 Dane Freeman.\n * Distributed under the terms of the Modified BSD License.\n */\n\n/*\n  CSS for in-DOM or standalone viewing: all selectors should tolerate having\n  \`.jp-ElkView\` stripped.\n*/\n:root {\n  --jp-elk-stroke-width: 1;\n\n  --jp-elk-node-fill: var(--jp-layout-color1);\n  --jp-elk-node-stroke: var(--jp-border-color0);\n\n  --jp-elk-edge-stroke: var(--jp-border-color0);\n\n  --jp-elk-port-fill: var(--jp-layout-color1);\n  --jp-elk-port-stroke: var(--jp-border-color0);\n\n  --jp-elk-label-color: var(--jp-ui-font-color0);\n  --jp-elk-label-font: var(--jp-content-font-family);\n  --jp-elk-label-font-size: var(--jp-ui-font-size0);\n\n  /* stable states */\n  --jp-elk-color-selected: var(--jp-brand-color2);\n  --jp-elk-stroke-width-selected: 3;\n\n  /* interactive states */\n  --jp-elk-stroke-hover: var(--jp-brand-color3);\n  --jp-elk-stroke-width-hover: 2;\n\n  --jp-elk-stroke-hover-selected: var(--jp-warn-color3);\n\n  /* sugar */\n  --jp-elk-transition: 0.1s ease-in;\n}\n\n.jp-ElkView .elkdefs > symbol {\n  overflow: visible;\n}\n\n.jp-ElkView .elknode {\n  stroke: var(--jp-elk-node-stroke);\n  stroke-width: var(--jp-elk-stroke-width);\n  fill: var(--jp-elk-node-fill);\n}\n\n.jp-ElkView .elkport {\n  stroke: var(--jp-elk-port-stroke);\n  stroke-width: var(--jp-elk-stroke-width);\n  fill: var(--jp-elk-port-fill);\n}\n\n.jp-ElkView .elkedge {\n  fill: none;\n  stroke: var(--jp-elk-edge-stroke);\n  stroke-width: var(--jp-elk-stroke-width);\n}\n\n.jp-ElkView .elklabel {\n  stroke-width: 0;\n  stroke: var(--jp-elk-label-color);\n  fill: var(--jp-elk-label-color);\n  font-family: var(--jp-elk-label-font);\n  font-size: var(--jp-elk-label-font-size);\n  dominant-baseline: hanging;\n}\n\n.jp-ElkView .elkjunction {\n  stroke: none;\n  fill: var(--jp-elk-edge-stroke);\n}\n\n/* stable states */\n.jp-ElkView .elknode.selected,\n.jp-ElkView .elkport.selected,\n.jp-ElkView .elkedge.selected,\n.jp-ElkView .elkedge.selected .elkarrow {\n  stroke: var(--jp-elk-color-selected);\n  stroke-width: var(--jp-elk-stroke-width-selected);\n  transition: stroke stroke-width var(--jp-elk-transition);\n}\n\n.jp-ElkView .elklabel.selected {\n  fill: var(--jp-elk-color-selected);\n  transition: fill var(--jp-elk-transition);\n}\n\n/* interactive states: elklabel does not have a mouseover selector/ancestor */\n.jp-ElkView .elknode.mouseover,\n.jp-ElkView .elkport.mouseover,\n.jp-ElkView .elkedge.mouseover {\n  stroke: var(--jp-elk-stroke-hover);\n  stroke-width: var(--jp-elk-stroke-width-hover);\n  transition: stroke stroke-width var(--jp-elk-transition);\n}\n\n.jp-ElkView .elknode.selected.mouseover,\n.jp-ElkView .elkport.selected.mouseover,\n.jp-ElkView .elkedge.selected.mouseover,\n.jp-ElkView .elkedge.selected.mouseover .elkarrow {\n  stroke-width: var(--jp-elk-stroke-width-hover);\n  stroke: var(--jp-elk-stroke-hover-selected);\n  transition: fill stroke var(--jp-elk-transition);\n}\n\n`.replace(/\/\*(.|\n)*?\*\//gm," ").replace(/.jp-ElkView /g,"").replace(/\n/g," ").replace(/\s+/g," ").replace(/\}/g,"}\n");class d extends l.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:d.model_name,_model_module_version:a.q4,_view_module:a.A1,_view_name:p.view_name,_view_module_version:a.q4,diagram:null,value:null,enabled:!0,extra_css:"",padding:20,app:null,strip_ids:!0,add_xml_header:!0})}get enabled(){return this.get("enabled")||!0}get diagram(){return this.get("diagram")}get app(){return this.get("app")}get app_raw_css(){var e;return(null===(e=this.app)||void 0===e?void 0:e.get("raw_css"))||[]}initialize(e,t){super.initialize(e,t),this.on("change:diagram",this._on_diagram_changed,this),this.on("change:app",this._on_app_changed,this),this._on_diagram_changed(),this._on_app_changed()}_on_diagram_changed(){a.ZF&&console.warn("[export] diagram changed",arguments);const{diagram:e}=this;null!=(null==e?void 0:e.layoutUpdated)&&(this.diagram.layoutUpdated.connect(this._schedule_update,this),this.enabled&&this._schedule_update())}is_an_elkmodel(e){return e instanceof r.ELKDiagramModel}_on_app_changed(){a.ZF&&console.warn("[export] app changed",arguments);const{app:e}=this;if(null!=(null==e?void 0:e.on)){e.on("change:raw_css",this._schedule_update,this);const t=e.get("children")||[],n=t.filter(this.is_an_elkmodel);n.length&&n[0].layoutUpdated?n[0].layoutUpdated.connect(this._schedule_update,this):a.ZF&&console.warn("[export] no app diagram ready",t)}}async a_view(){var e;if(!this.enabled)return;let t=this.diagram.views;if((null===(e=this.app)||void 0===e?void 0:e.views)&&(t=Object.assign(Object.assign({},t),this.app.views)),Object.keys(t).length)for(const e of Object.values(t)){const t=await e;if(t.el)return await t.displayed,t}}_schedule_update(){this.enabled&&(null!=this._update_timeout&&(window.clearInterval(this._update_timeout),this._update_timeout=null),this._update_timeout=setTimeout((()=>this._on_layout_updated()),1e3))}async _on_layout_updated(){var e;if(!this.enabled)return;const t=await this.a_view(),n=null===(e=null==t?void 0:t.el)||void 0===e?void 0:e.querySelector("svg");if(null==n)return void this._schedule_update();const{outerHTML:l}=n,a=this.get("padding"),r=this.get("strip_ids"),s=this.get("add_xml_header"),o=this.app_raw_css,d=`\n      <style type="text/css">\n        <![CDATA[\n          \n        ${i}\n        ${o.join("\n")}\n        ${this.get("extra_css")||""}\n    \n        ]]>\n      </style>`,p=n.querySelector("g");let k=1;const c=p.attributes.transform.value.match(/scale\((.*?)\)/);null!=c&&(k=parseFloat(c[1]));const{width:h,height:u}=p.getBoundingClientRect();let v=l.replace(/<svg([^>]+)>/,`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${h/k+a} ${u/k+a}" $1>\n          ${d}\n        `).replace(/ transform=".*?"/,"");r&&(v=v.replace(/\s*id="[^"]*"\s*/g," ")),s&&(v=`<?xml version="1.0" standalone="no"?>\n${v}`),this.set({value:v}),this.save_changes(t.callbacks)}}d.model_name="ELKExporterModel",d.serializers=Object.assign(Object.assign({},l.WidgetModel.serializers),{diagram:{deserialize:l.unpack_models},app:{deserialize:l.unpack_models}});class p extends l.WidgetView{}p.view_name="ELKExporterView"}}]);